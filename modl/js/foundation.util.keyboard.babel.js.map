{"version":3,"sources":["foundation/foundation.util.keyboard.js"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA,CAAC,UAAS,CAAT,EAAY;;AAEb,MAAM,WAAW;AACf,OAAG,KAAH;AACA,QAAI,OAAJ;AACA,QAAI,QAAJ;AACA,QAAI,OAAJ;AACA,QAAI,YAAJ;AACA,QAAI,UAAJ;AACA,QAAI,aAAJ;AACA,QAAI,YAAJ;GARI,CAFO;;AAab,MAAI,WAAW,EAAX,CAbS;;AAeb,MAAI,WAAW;AACb,UAAM,YAAY,QAAZ,CAAN;;;;;;;;AAQA,gCAAS,OAAO;AACd,UAAI,MAAM,SAAS,MAAM,KAAN,IAAe,MAAM,OAAN,CAAxB,IAA0C,OAAO,YAAP,CAAoB,MAAM,KAAN,CAApB,CAAiC,WAAjC,EAA1C,CADI;AAEd,UAAI,MAAM,QAAN,EAAgB,iBAAe,GAAf,CAApB;AACA,UAAI,MAAM,OAAN,EAAe,gBAAc,GAAd,CAAnB;AACA,UAAI,MAAM,MAAN,EAAc,eAAa,GAAb,CAAlB;AACA,aAAO,GAAP,CALc;KATH;;;;;;;;;AAuBb,kCAAU,OAAO,WAAW,WAAW;AACrC,UAAI,cAAc,SAAS,SAAT,CAAd;UACF,UAAU,KAAK,QAAL,CAAc,KAAd,CAAV;UACA,IAFF;UAGE,OAHF;UAIE,EAJF,CADqC;;AAOrC,UAAI,CAAC,WAAD,EAAc,OAAO,QAAQ,IAAR,CAAa,wBAAb,CAAP,CAAlB;;AAEA,UAAI,OAAO,YAAY,GAAZ,KAAoB,WAA3B,EAAwC;;AACxC,eAAO,WAAP;AADwC,OAA5C,MAEO;;AACH,cAAI,WAAW,GAAX,EAAJ,EAAsB,OAAO,EAAE,MAAF,CAAS,EAAT,EAAa,YAAY,GAAZ,EAAiB,YAAY,GAAZ,CAArC,CAAtB,KAEK,OAAO,EAAE,MAAF,CAAS,EAAT,EAAa,YAAY,GAAZ,EAAiB,YAAY,GAAZ,CAArC,CAFL;SAHJ;AAOA,gBAAU,KAAK,OAAL,CAAV,CAhBqC;;AAkBrC,WAAK,UAAU,OAAV,CAAL,CAlBqC;AAmBrC,UAAI,MAAM,OAAO,EAAP,KAAc,UAAd,EAA0B;;AAClC,WAAG,KAAH,GADkC;AAElC,YAAI,UAAU,OAAV,IAAqB,OAAO,UAAU,OAAV,KAAsB,UAA7B,EAAyC;;AAC9D,oBAAU,OAAV,CAAkB,KAAlB,GAD8D;SAAlE;OAFF,MAKO;AACL,YAAI,UAAU,SAAV,IAAuB,OAAO,UAAU,SAAV,KAAwB,UAA/B,EAA2C;;AAClE,oBAAU,SAAV,CAAoB,KAApB,GADkE;SAAtE;OANF;KA1CW;;;;;;;;AA2Db,0CAAc,UAAU;AACtB,aAAO,SAAS,IAAT,CAAc,8KAAd,EAA8L,MAA9L,CAAqM,YAAW;AACrN,YAAI,CAAC,EAAE,IAAF,EAAQ,EAAR,CAAW,UAAX,CAAD,IAA2B,EAAE,IAAF,EAAQ,IAAR,CAAa,UAAb,IAA2B,CAA3B,EAA8B;AAAE,iBAAO,KAAP,CAAF;SAA7D;AADqN,eAE9M,IAAP,CAFqN;OAAX,CAA5M,CADsB;KA3DX;;;;;;;;;AAwEb,gCAAS,eAAe,MAAM;AAC5B,eAAS,aAAT,IAA0B,IAA1B,CAD4B;KAxEjB;GAAX;;;;;;AAfS,WAgGJ,WAAT,CAAqB,GAArB,EAA0B;AACxB,QAAI,IAAI,EAAJ,CADoB;AAExB,SAAK,IAAI,EAAJ,IAAU,GAAf;AAAoB,QAAE,IAAI,EAAJ,CAAF,IAAa,IAAI,EAAJ,CAAb;KAApB,OACO,CAAP,CAHwB;GAA1B;;AAMA,aAAW,QAAX,GAAsB,QAAtB,CAtGa;CAAZ,CAwGC,MAxGD,CAAD","file":"foundation.util.keyboard.babel.js","sourcesContent":["/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/\n\n'use strict';\n\n!function($) {\n\nconst keyCodes = {\n  9: 'TAB',\n  13: 'ENTER',\n  27: 'ESCAPE',\n  32: 'SPACE',\n  37: 'ARROW_LEFT',\n  38: 'ARROW_UP',\n  39: 'ARROW_RIGHT',\n  40: 'ARROW_DOWN'\n}\n\nvar commands = {}\n\nvar Keyboard = {\n  keys: getKeyCodes(keyCodes),\n\n  /**\n   * Parses the (keyboard) event and returns a String that represents its key\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   * @param {Event} event - the event generated by the event handler\n   * @return String key - String that represents the key pressed\n   */\n  parseKey(event) {\n    var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n    if (event.shiftKey) key = `SHIFT_${key}`;\n    if (event.ctrlKey) key = `CTRL_${key}`;\n    if (event.altKey) key = `ALT_${key}`;\n    return key;\n  },\n\n  /**\n   * Handles the given (keyboard) event\n   * @param {Event} event - the event generated by the event handler\n   * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n   * @param {Objects} functions - collection of functions that are to be executed\n   */\n  handleKey(event, component, functions) {\n    var commandList = commands[component],\n      keyCode = this.parseKey(event),\n      cmds,\n      command,\n      fn;\n\n    if (!commandList) return console.warn('Component not defined!');\n\n    if (typeof commandList.ltr === 'undefined') { // this component does not differentiate between ltr and rtl\n        cmds = commandList; // use plain list\n    } else { // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);\n\n        else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n    }\n    command = cmds[keyCode];\n\n    fn = functions[command];\n    if (fn && typeof fn === 'function') { // execute function  if exists\n      fn.apply();\n      if (functions.handled || typeof functions.handled === 'function') { // execute function when event was handled\n          functions.handled.apply();\n      }\n    } else {\n      if (functions.unhandled || typeof functions.unhandled === 'function') { // execute function when event was not handled\n          functions.unhandled.apply();\n      }\n    }\n  },\n\n  /**\n   * Finds all focusable elements within the given `$element`\n   * @param {jQuery} $element - jQuery object to search within\n   * @return {jQuery} $focusable - all focusable elements within `$element`\n   */\n  findFocusable($element) {\n    return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function() {\n      if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) { return false; } //only have visible elements and those that have a tabindex greater or equal 0\n      return true;\n    });\n  },\n\n  /**\n   * Returns the component name name\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\n   * @return String componentName\n   */\n\n  register(componentName, cmds) {\n    commands[componentName] = cmds;\n  }\n}\n\n/*\n * Constants for easier comparing.\n * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n */\nfunction getKeyCodes(kcs) {\n  var k = {};\n  for (var kc in kcs) k[kcs[kc]] = kcs[kc];\n  return k;\n}\n\nFoundation.Keyboard = Keyboard;\n\n}(jQuery);\n"]}